@@// ---------------------------------------------------------------------------------------
@@// Generated code: DO NOT MODIFY
@@// ---------------------------------------------------------------------------------------
@@

#![allow(dead_code)]
#![allow(non_snake_case)]
[!deprecated]
[!imports]

pub type [!class] = {{std.sync.Arc|Arc}}<dyn [!interface_name]OrBuilder>;

// ---------------------------------------------------------------------------------------
// [!interface_name] interface
// ---------------------------------------------------------------------------------------

pub trait [!interface_name]OrBuilder  {
[!class_getter_declaration]
  fn build(&self) -> [!class];
  fn to_builder(&self) -> [!builder_name];
  fn to_json(&self) -> {{crate.json.*|}}JSValue;
}

#[derive(Clone)]
pub struct [!builder_name] {
[!instance_fields]}


[!class_specific]


impl [!class]OrBuilder for [!class]Builder {

[!class_getter_implementation]

  fn build(&self) -> [!class] {
    Arc::new(self.clone())
  }

  fn to_builder(&self) -> [!class]Builder {
      self.clone()
  }

  fn to_json(&self) -> {{crate.json.*|}}JSValue {
    let m = new_map();
[!to_json]
    m
  }

}


// ---------------------------------------------------------------------------------------
// Implementation of builder
// ---------------------------------------------------------------------------------------

impl [!class]Builder {

[!setters]
}

impl {{std.fmt|fmt}}::Display for dyn [!class]OrBuilder {
  fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
    write!(f, "{}", self.to_json().to_string())
  }
}

impl fmt::Display for [!class]Builder {
  fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
    write!(f, "{}", self.to_json().to_string())
  }
}

// ---------------------------------------------------------------------------------------
// Global functions
// ---------------------------------------------------------------------------------------

// Return a newly-built default instance.
//
pub fn default_[!class]() -> [!class] {
  Arc::new(new_[!class]())
}

// Return a new builder.
// 
pub fn new_[!class]() -> [!class]Builder {
  [!class]Builder {
[!class_init_fields_to_defaults]
  }
}
  
// Attempt to parse (deserialize) a [!class] from a JSValue
//
pub fn parse_[!class](m: {{crate.json.*|}}JSValue) -> Result<[!class], Box<dyn error::{{std.error|Error}}>> {
    let mut n = new_[!class]();
[!parse]
    Ok(n.build())
}

// Encode (serialize) a [!class] to a JSValue
//
pub fn to_json_[!class](obj: &[!class]) -> JSValue {
    obj.to_json()
}
