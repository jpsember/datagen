@@// ---------------------------------------------------------------------------------------
@@// Generated code: DO NOT MODIFY
@@// ---------------------------------------------------------------------------------------
@@

#![allow(dead_code)]
#![allow(non_snake_case)]
[!deprecated]
[!imports]

// ---------------------------------------------------------------------------------------
// [!class] data type
// ---------------------------------------------------------------------------------------

#[derive(Clone)]
pub struct [!class] {
[!instance_fields]}

impl [!class] {

[!class_getter_declaration]

  pub fn build(&self) -> [!class] {
      self.clone()
  }

  pub fn to_builder(&self) -> [!class] {
      self.clone()
  }

  pub fn to_json(&self) -> {{[!jtools]tools.*|}}JSValue {
    let m = new_map();
[!to_json]
    m
  }

[!setters]

}

[!class_specific]


impl {{std.fmt|fmt}}::Display for [!class] {
  fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
    write!(f, "{}", self.to_json())
  }
}


impl fmt::Debug for [!class] {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        fmt::Display::fmt(self, f)
    }
}

// ---------------------------------------------------------------------------------------
// Global functions
// ---------------------------------------------------------------------------------------

// Return a newly-built default instance
//
pub fn new_[!class]() -> [!class] {
  [!class] {
[!class_init_fields_to_defaults]
  }
}

// Attempt to parse (deserialize) a [!class] from a JSValue
//
pub fn parse_[!class](m: &{{[!jtools]tools.*|}}JSValue) -> Result<[!class], {{[!jtools]jerror.JError|JError}}> {
    let mut n = new_[!class]();
[!parse]
    Ok(n)
}

// Encode (serialize) a [!class] to a JSValue
//
pub fn to_json_[!class](obj: &[!class]) -> JSValue {
    obj.to_json()
}
