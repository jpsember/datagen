// Controls for barnserv web app

class jsproto.rgbimage.FlagImageConfig;
class jsproto.UdderFocusConfig;


// We have to be careful to point to the appropriate package for this
// class that is defined in the 'rawimage' project (issue 1841)
//
class js.rawimage.jsproto.UdderModelParameters;

message {
  int version;

  // Waits for this delay to elapse before continuing the startup process, to allow
  // external processes, such as an udder inference service, to finish starting as well
  //
  int startup_delay_ms;

  // Minimum confidence (0...100) required for udder detection
  //
  int conf;

  // If true, barn files get pushed to S3.  Otherwise, they will be placed in the directory `barnserv/volume_received_files`
  //
  bool s3;

  // If nonempty, defines a range of hours to restrict times where pushing to S3 (and possibly
  // other heavyweight network access) can occur.
  //
  // The syntax is "dd_dd", where 'dd' represents the hour.
  // For example, "23-03" means between 11 pm and 3 am (exclusive), or a total window of 4 hours.
  // "00-05" means midnight to 4:59 am
  //
  string network_time;

  // If true, uses a sample of prerecorded images for simulating FLIR (and cow id) images, instead of live
  // images from the cameras
  //
  bool simulation;

  // If nonzero, quits app after this many seconds
  //
  int quit_delay_seconds;

  // The period between successive AJAX updates of the dashboard web page
  //
  int ajax_update_interval_ms;

  // If nonzero, rotation to apply to camera images.  To compensate for a camera that was installed
  // upside down (or sideways).  Only multiples of 90 degrees are supported
  //
  int image_rotate_degrees;

  // If true, performs udder detection
  //
  bool inference;

  // If true, and in simulation mode, uses previously recorded inference results instead
  // of performing inference, to reduce CPU load (e.g. during development)
  //
  bool use_simulated_inference_results;

  // To avoid being dismissed as an image unchanged from the previous,
  // the minimum average squared difference between current and previous image's pixels, times 1000
  //
  float static_image_filter_value;

  // If true, displays an 'under construction' banner
  //
  bool under_construction;

  // If true, applies a sharpening effect to the displayed udder images.  Does not affect any analysis of the image
  //
  bool sharpen;

  // If not null, a transformation to apply the received udder images.  To attempt to compensate for
  // improperly-placed cameras.
  // Format must be: f_f_f_f_f_f, where each 'f' is a floating point value, so the six values
  // represent the arguments to Java's AffineTransform(...) constructor
  //
  string udder_image_transform;

  // Controls whether the barn server is running in the 'mobile' configuration.
  // This applies, e.g., if it's running on the Jetson, in which case camera images are received via the
  // filesystem instead of via http
  //
  bool mobile;

  // If true, renders the udder outline using the marching squares contour, vs its convex hull (not supported for YOLO)
  //
  bool contour;

  // Directory to monitor for images arriving from the FLIR camera (mobile only)
  //
  File cam_stream;

  // Directory for web server to store cached images to, accessible to browser
  //
  File image_display_cache_path;

  // Directory containing simulated udder images   !!! No longer used !!!?
  //
  File sample_images_path;

  // Directory containing simulated rgb images     !!! No longer used !!!?
  //
  File sample_rgb_images_path;

  FlagImageConfig flag_image_config;

  UdderFocusConfig udder_focus_config;

  // Render timestamps into the displayed versions of the FLIR, RGB images
  //
  bool render_timestamps;

  UdderModelParameters udder_model_parameters;

  bool render_stall_numbers;
  bool render_bgnd_mask;
  bool render_velocity_marks;

}
